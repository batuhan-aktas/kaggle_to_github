{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/batuhanaktas/miuul-data-scientist-bootcamp-first-assignment?scriptVersionId=194301876\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"###############################################\n# TASK 1: Examine the types of data structures.\n###############################################\n\nx = 8\ntype(x)\n\ny = 3.2\ntype(y)\n\nz = 8j + 18\ntype(z)\n\na = \"Hello World\"\ntype(a)\n\nb = True\ntype(b)\n\nc = 23 < 22\ntype(c)\n\n\nl = [1, 2, 3, 4,\"String\",3.2, False]\ntype(l)\n\n\nd = {\"Name\": \"Jake\",\n     \"Age\": [27,56],\n     \"Adress\": \"Downtown\"}\ntype(d)\n\nt = (\"Machine Learning\", \"Data Science\")\ntype(t)\n\n\ns = {\"Python\", \"Machine Learning\", \"Data Science\",\"Python\"}\ntype(s)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-27T16:04:11.025062Z","iopub.execute_input":"2024-08-27T16:04:11.025475Z","iopub.status.idle":"2024-08-27T16:04:11.040608Z","shell.execute_reply.started":"2024-08-27T16:04:11.025428Z","shell.execute_reply":"2024-08-27T16:04:11.039243Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 2: Translate the given string to uppercase. Replace commas and periods with spaces, and separate it word by word.\n# Expected Output: ['THE', 'GOAL', 'IS', 'TO', 'TURN', 'DATA', 'INTO', 'INFORMATION', 'AND', 'INFORMATION', 'INTO', 'INSIGHT']\n###############################################\n\ntext = \"The goal is to turn data into information, and information into insight.\"\n\ntext = text.replace(\",\",\" \")\ntext = text.replace(\".\", \" \")\ntext = text.upper()\ntext = text.split()\nprint(text)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:04:27.099744Z","iopub.execute_input":"2024-08-27T16:04:27.100632Z","iopub.status.idle":"2024-08-27T16:04:27.106497Z","shell.execute_reply.started":"2024-08-27T16:04:27.10059Z","shell.execute_reply":"2024-08-27T16:04:27.105481Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 3: Perform the following tasks for the given list.\n###############################################\n\nlst = [\"D\",\"A\",\"T\",\"A\",\"S\",\"C\",\"I\",\"E\",\"N\",\"C\",\"E\"]\n\n# Step 1: Check the number of elements in the given list.\n\nlen(lst)\n\n# Step 2: Retrieve the elements at the first and tenth indices.\nprint(lst[0], lst[9])\n\n# Step 3: Create list [\"D\",\"A\",\"T\",\"A\"] from the given list.\nnew_lst = lst[0:4]\nprint(new_lst)\n\n# Step 4: Delete the element at the eighth index.\ndel lst[7]\nprint(lst)\n\n# Step 5: Add a new element.\nlst.append(\"S\")\nprint(lst)\n\n# Step 6: Re-add the element \"N\" at the eighth index.\n\nlst.insert(7,\"N\")\nprint(lst)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:04:30.710155Z","iopub.execute_input":"2024-08-27T16:04:30.711052Z","iopub.status.idle":"2024-08-27T16:04:30.71784Z","shell.execute_reply.started":"2024-08-27T16:04:30.711009Z","shell.execute_reply":"2024-08-27T16:04:30.7168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 4: Apply the following steps to the given dictionary structure.\n###############################################\n\ndict = {'Christian': [\"America\",18],\n        'Daisy':[\"England\",12],\n        'Antonio':[\"Spain\",22],\n        'Dante':[\"Italy\",25]}\n\n\n# Step 1: Access the key values.\nprint(dict.keys())\n\n# Step 2: Access the values.\nprint(dict.values())\n\n# Step 3: Update the value of Daisy key 12 to 13.\ndict[\"Daisy\"][1] = 13\nprint(dict)\n\n# Step 4: Add a new value with the key value Ahmet value [Turkey,24].\ndict[\"Ahmet\"] = [\"Turkey\", 24]\nprint(dict)\n\n# Step 5: Delete Antonio from the dictionary.\ndict.pop('Antonio')\nprint(dict)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:04:53.324113Z","iopub.execute_input":"2024-08-27T16:04:53.324907Z","iopub.status.idle":"2024-08-27T16:04:53.331968Z","shell.execute_reply.started":"2024-08-27T16:04:53.324864Z","shell.execute_reply":"2024-08-27T16:04:53.330963Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 5: Write a function that takes a list as an argument, assigns the odd and even numbers in the list to separate lists, and returns these lists.\n###############################################\n\nl = [2,13,18,93,22]\nodd_list = []\neven_list = []\n\ndef odd_even_seperator(list):\n    for item in list:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return even_list, odd_list\n\nodd_even_seperator(l)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:05:06.794221Z","iopub.execute_input":"2024-08-27T16:05:06.795122Z","iopub.status.idle":"2024-08-27T16:05:06.802868Z","shell.execute_reply.started":"2024-08-27T16:05:06.79508Z","shell.execute_reply":"2024-08-27T16:05:06.801729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 6: The list below includes the names of students who have achieved success in the engineering and medical faculties.\n# The first three students represent the success ranking of the engineering faculty, while the last three students belong to the medical faculty student ranking.\n# Print the student rankings by faculty using enumeration.\n# Expected Output: \n# Mühendislik Fakültesi 1 . öğrenci: Ali\n# Mühendislik Fakültesi 2 . öğrenci: Veli\n# Mühendislik Fakültesi 3 . öğrenci: Ayşe\n# Tıp Fakültesi 1 . öğrenci: Talat\n# Tıp Fakültesi 2 . öğrenci: Zeynep\n# Tıp Fakültesi 3 . öğrenci: Ece\n###############################################\n\nogrenciler = [\"Ali\",\"Veli\",\"Ayşe\",\"Talat\",\"Zeynep\",\"Ece\"]\n\nfor index, ogrenci in enumerate(ogrenciler, start=1):\n    if index <4:\n        print(\"Mühendislik Fakültesi \"+str(index)+\" . öğrenci: \"+ogrenci)\n    else:\n        print(\"Tıp Fakültesi \"+str(index-3)+\" . öğrenci: \"+ogrenci)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:05:44.166599Z","iopub.execute_input":"2024-08-27T16:05:44.167345Z","iopub.status.idle":"2024-08-27T16:05:44.173965Z","shell.execute_reply.started":"2024-08-27T16:05:44.16729Z","shell.execute_reply":"2024-08-27T16:05:44.172824Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 7: There are 3 lists below. The lists contain the code, credit and quota information of a course, respectively. Print the course information using zip.\n# Expected Output:\n# Kredisi 3 olan CMP1005 kodlu dersin kontenjanı 30 kişidir.\n# Kredisi 4 olan PSY1001 kodlu dersin kontenjanı 75 kişidir.\n# Kredisi 2 olan HUK1005 kodlu dersin kontenjanı 150 kişidir.\n# Kredisi 4 olan SEN2204 kodlu dersin kontenjanı 25 kişidir.\n###############################################\n\nders_kodu = [\"CMP1005\",\"PSY1001\",\"HUK1005\",\"SEN2204\"]\nkredi = [3,4,2,4]\nkontenjan = [30,75,150,25]\n\nclass_info = zip(ders_kodu,kredi,kontenjan)\n\nfor subject_kod, credit, capacity in class_info:\n    print(\"Kredisi \"+str(credit)+\" olan \"+subject_kod+\" kodlu dersin kontenjanı \"+str(capacity)+ \" kişidir.\")","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:05:59.333625Z","iopub.execute_input":"2024-08-27T16:05:59.334396Z","iopub.status.idle":"2024-08-27T16:05:59.340666Z","shell.execute_reply.started":"2024-08-27T16:05:59.33436Z","shell.execute_reply":"2024-08-27T16:05:59.339588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"###############################################\n# TASK 8: There are 2 sets given below.\n# You are expected to define a function that will print the common elements of set 1 if it covers set 2, and the difference of set 2 from set 1 if it does not.\n# Expected Output: {'miuul', 'qcut', 'lambda', 'function'}\n###############################################\n\nkume1 = set([\"data\", \"python\"])\nkume2 = set([\"data\", \"function\", \"qcut\", \"lambda\", \"python\", \"miuul\"])\n\ndef compare_sets(kume1, kume2):\n    if kume1.issuperset(kume2):\n        return kume1.intersection(kume2)\n    else:\n        return kume2.difference(kume1)\n\nprint(compare_sets(kume1, kume2))","metadata":{"execution":{"iopub.status.busy":"2024-08-27T16:12:11.874564Z","iopub.execute_input":"2024-08-27T16:12:11.875524Z","iopub.status.idle":"2024-08-27T16:12:11.881782Z","shell.execute_reply.started":"2024-08-27T16:12:11.875479Z","shell.execute_reply":"2024-08-27T16:12:11.880832Z"},"trusted":true},"execution_count":null,"outputs":[]}]}